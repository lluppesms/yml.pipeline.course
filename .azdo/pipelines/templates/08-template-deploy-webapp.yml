# ----------------------------------------------------------------------------------------------------
# Template to deploy a pre-built Azure WebApp artifact to one environment
# ----------------------------------------------------------------------------------------------------
parameters: 
- name: environmentName
  default:  'DEMO'
- name: pipelineResourceIdentifier # supplied if this is deployed with artifacts from another pipeline
  default: '' # internal identifier for the resource

# ------------------------------------------------------------------------------------------------------------------------
stages:
  - stage: DeployAppStage
    displayName: Deploy App
    jobs:
    - deployment: InitializeDeploy${{ parameters.environmentName }}WebApp
      displayName: Initialize ${{ parameters.environmentName }} WebApp
      environment: ${{ parameters.environmentName }}

    - job: Deploy${{ parameters.environmentName }}WebApp
      displayName: Deploy ${{ parameters.environmentName }} WebApp
      variables:
        - name: environmentName
          value: ${{ parameters.environmentName }}
        - name: environmentNameUpper
          value: ${{ upper(parameters.environmentName) }}
        - name: environmentNameLower
          value: ${{ lower(parameters.environmentName) }}
        - name: fullAppName
          value: '$(appName)-$(environmentNameLower)'
        - name: pipelineResourcePath
          value: '$(Pipeline.Workspace)/${{ parameters.pipelineResourceIdentifier }}'
        - name: pipelineResourceDropPath
          value: '$(Pipeline.Workspace)/${{ parameters.pipelineResourceIdentifier }}/drop'
        - template: ../vars/var-common-08.yml
        - template: ../vars/var-source-location-app.yml

      steps:
      - task: Bash@3
        displayName: 'Display Variables'
        inputs:
          targetType: 'inline'
          script: |
            echo "Display All Environment Variables:"
            printenv | sort
        continueOnError: true

      - task: CmdLine@2
        displayName: 'Display Files'
        inputs:
          script: |
            echo "Directory of Default Working Directory:"
            tree $(System.DefaultWorkingDirectory)
        continueOnError: true

      # ----------------------------------------------------------------------------------------------------
      # if a Pipeline Resource was NOT supplied, then the artifact was built inline - just download it
      # ----------------------------------------------------------------------------------------------------
      - ${{ if eq(parameters.pipelineResourceIdentifier, '') }}:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Pipeline Artifacts'
          inputs:
              artifact: drop

      # ----------------------------------------------------------------------------------------------------
      # else if a Pipeline Resource WAS supplied, then show info about the it and copy it over (previously built elsewhere)
      # ----------------------------------------------------------------------------------------------------
      - ${{ if ne(parameters.pipelineResourceIdentifier, '') }}:
        - download: ${{ parameters.pipelineResourceIdentifier }}
          displayName: Download Artifact Files
          
        - task: CmdLine@2
          inputs:
            script: |
              echo "Build Artifact Name: ${{ parameters.pipelineResourceIdentifier }}"
              echo "pipelineResourcePath: $(pipelineResourcePath)"
              echo "pipelineResourceDropPath: $(pipelineResourceDropPath)"
              echo "projectID: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.projectID)"
              echo "pipelineName: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.pipelineName)"
              echo "pipelineID: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.pipelineID)"
              echo "runName: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.runName)"
              echo "runID: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.runID)"
              echo "runURI: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.runURI)"
              echo "sourceBranch: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.sourceBranch)"
              echo "sourceCommit: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.sourceCommit)"
              echo "sourceProvider: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.sourceProvider)"
              echo "requestedFor: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.requestedFor)"
              echo "requestedForID: $(resources.pipeline.${{ parameters.pipelineResourceIdentifier }}.requestedForID)"
              echo "Directory of $(pipelineResourcePath):"
              tree -L 4 $(Build.SourcesDirectory)
          displayName: 'Display Artifact Info'
          continueOnError: true

        - task: CopyFiles@2
          displayName: Copy Artifact Package to Root
          inputs:
            sourceFolder: '$(pipelineResourceDropPath)'
            targetFolder: '$(Pipeline.Workspace)'

      # ----------------------------------------------------------------------------------------------------
      # /end - if a Pipeline Resource...
      # ----------------------------------------------------------------------------------------------------

      - task: CmdLine@2
        displayName: 'Display Variables and Tree'
        inputs:
          script: |
            echo "fullAppName=$(fullAppName)"
            echo "azureServiceConnection=$(azureServiceConnection)"
            echo "appName=$(appName)"
            echo "environmentName=$(environmentName)"
            echo "Directory of pipeline workspace:"
            tree -L 4 $(Pipeline.Workspace)
            echo "----------------------------------------"
            echo "##[group]Directory of Default Working Directory:"
            tree $(System.DefaultWorkingDirectory)
            dir $(System.DefaultWorkingDirectory) /s
            echo "##[endgroup]"
        continueOnError: true

      - task: AzureRmWebAppDeployment@4
        displayName: 'Publish App to Azure'
        inputs:
          ConnectionType: AzureRM
          azureSubscription: '$(azureServiceConnection)'
          appType: webAppLinux
          WebAppName: $(fullAppName)
          Package: "$(Build.ArtifactStagingDirectory)/../$(appProjectName).zip"
          enableCustomDeployment: true
          deploymentMethod: zipDeployment
